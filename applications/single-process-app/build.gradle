plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.22'
    id 'com.github.node-gradle.node' version '7.0.2'
}

node {
    version = '20.10.0'  // Mirrors my local machine.
    npmVersion = '10.2.5' // Also mirrors local machine.
    download = true

    workDir = file("${project.projectDir}/../../web/.gradle/nodejs")

    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${project.projectDir}/../../web/.gradle/npm")

    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = file("${project.projectDir}/../../web")
}

test {
    workingDir = projectDir
}

version '1.0-SNAPSHOT'

apply plugin: 'application'

mainClassName = "edu.colorado.AppKt"

dependencies {
    implementation "io.ktor:ktor-server-metrics-micrometer:$ktor_version"
    implementation "io.micrometer:micrometer-registry-prometheus:1.12.3"

    implementation project(":components:data-analyzer")
    implementation project(":components:data-collector")
    implementation project(":components:workflow-support")
    implementation project(":components:database")
    implementation project(":components:zmq-router")
    implementation project(":components:fred-client")

    testImplementation "io.ktor:ktor-server-test-host:$ktor_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

tasks.withType(Copy).all {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": "edu.colorado.AppKt"
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task npmInstallVitest(type: NpmTask) {
    dependsOn npmInstall
    args = ['install', '-g', 'vitest']
}

task npmTest(type: NpmTask) {
    dependsOn npmInstallVitest
    args = ['run', 'test']
}

task npmBuild(type: NpmTask) {
    dependsOn npmTest
    args = ['run', 'build']
}

task copyWeb(type: Copy) {
    dependsOn npmBuild
    from "${project.projectDir}/../../web/dist"
    into "${project.projectDir}/src/main/resources/web"
}

processResources { dependsOn copyWeb }
build { dependsOn copyWeb } // Critical for auto-build w/ Vite.
